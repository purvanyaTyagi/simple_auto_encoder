# -*- coding: utf-8 -*-
"""autoencoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aX9WXCRTuC3ZW9To58dJOMyMu9VMVwZh
"""

from keras.datasets import mnist
import os
import numpy as np
import tensorflow as tf


(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = tf.keras.utils.normalize(
    x_train, axis=-1, order=2
)

x_train = x_train.reshape(-1, 28*28*1)

x_train[0]

import tensorflow as tf
def create_generator(img_rows,img_cols,channels):
    generator = Sequential()
    generator.add(Dense(256, input_shape = (784,)))
    generator.add(LeakyReLU(0.2))

    generator.add(Dense(512))
    generator.add(LeakyReLU(0.2))

    generator.add(Dense(1024))
    generator.add(LeakyReLU(0.2))

    generator.add(Dense(img_rows*img_cols*channels, activation='tanh'))
    generator.compile(loss='binary_crossentropy', optimizer='RMSProp')
    return generator

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,LeakyReLU


generator = create_generator(28,28,1)

import matplotlib.pyplot as plt
#noise = tf.random.normal([1, 100])
noise = x_train[0]
noise = noise.reshape(1,784)
generated_image = generator.predict(noise)
#plt.imshow(generated_image[0, :, :, 0], cmap='gray')
generated_image = generated_image.reshape(784,)

generated_image = generated_image.reshape(28,28)

plt.imshow(generated_image, cmap='gray')

batch_size = 100
X_train = x_train.reshape(60000,784)
Y_train = x_train.reshape(60000,784)

generator.fit(X_train,Y_train,batch_size,10)

prediction = generator.predict(X_train)

prediction[0].shape

image = prediction[0].reshape(28,28)

plt.imshow(prediction[78].reshape(28,28))

plt.imshow(x_train[100].reshape(28,28))

